generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model championship {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  status              String                @db.VarChar(50)
  goal                goal[]
  match               match[]
  player_championship player_championship[]
  team_championship   team_championship[]
}

model coach {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  age               Int
  picture           String?
  team_championship team_championship[]
}

model goal {
  id                  Int                 @id @default(autoincrement())
  id_match            Int
  id_player           Int
  id_team             Int
  id_championship     Int
  championship        championship        @relation(fields: [id_championship], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_championship")
  match               match               @relation(fields: [id_match], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_match")
  player_championship player_championship @relation(fields: [id_player, id_championship], references: [id_player, id_championship], onDelete: NoAction, onUpdate: NoAction, map: "fk_player")
  team_championship   team_championship   @relation(fields: [id_team, id_championship], references: [id_team, id_championship], onDelete: NoAction, onUpdate: NoAction, map: "fk_team")
}

model match {
  id                                                                       Int                @id @default(autoincrement())
  id_referee                                                               Int?
  id_championship                                                          Int
  home_team                                                                Int
  visiting_team                                                            Int
  winner                                                                   Int?
  is_draw                                                                  Boolean?           @default(dbgenerated("\nCASE\n    WHEN (winner IS NULL) THEN true\n    ELSE false\nEND"))
  is_registered                                                            Boolean?           @default(false)
  round                                                                    Int
  goal                                                                     goal[]
  championship                                                             championship       @relation(fields: [id_championship], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_championship")
  team_championship_match_home_team_id_championshipToteam_championship     team_championship  @relation("match_home_team_id_championshipToteam_championship", fields: [home_team, id_championship], references: [id_team, id_championship], onDelete: NoAction, onUpdate: NoAction, map: "fk_home_team")
  referee                                                                  referee?           @relation(fields: [id_referee], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_referee")
  team_championship_match_visiting_team_id_championshipToteam_championship team_championship  @relation("match_visiting_team_id_championshipToteam_championship", fields: [visiting_team, id_championship], references: [id_team, id_championship], onDelete: NoAction, onUpdate: NoAction, map: "fk_visiting_team")
  team_championship_match_winner_id_championshipToteam_championship        team_championship? @relation("match_winner_id_championshipToteam_championship", fields: [winner, id_championship], references: [id_team, id_championship], onDelete: NoAction, onUpdate: NoAction, map: "fk_winner")
}

model player {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  age                 Int
  origin              String?               @db.VarChar(100)
  picture             String?
  dominant_leg        String                @db.Char(1)
  player_championship player_championship[]
}

model player_championship {
  id_player       Int
  id_championship Int
  id_team         Int
  goal            goal[]
  championship    championship @relation(fields: [id_championship], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_championship")
  player          player       @relation(fields: [id_player], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_player")
  team            team         @relation(fields: [id_team], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_team")

  @@id([id_player, id_championship])
}

model referee {
  id      Int     @id @default(autoincrement())
  name    String? @db.VarChar(100)
  age     Int
  picture String
  match   match[]
}

model team {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  emblem              String?
  player_championship player_championship[]
  team_championship   team_championship[]
  user                user[]
}

model team_championship {
  id_team                                                      Int
  id_championship                                              Int
  id_coach                                                     Int?
  goal                                                         goal[]
  match_match_home_team_id_championshipToteam_championship     match[]      @relation("match_home_team_id_championshipToteam_championship")
  match_match_visiting_team_id_championshipToteam_championship match[]      @relation("match_visiting_team_id_championshipToteam_championship")
  match_match_winner_id_championshipToteam_championship        match[]      @relation("match_winner_id_championshipToteam_championship")
  championship                                                 championship @relation(fields: [id_championship], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_championship")
  coach                                                        coach?       @relation(fields: [id_coach], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_coach")
  team                                                         team         @relation(fields: [id_team], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_team")

  @@id([id_team, id_championship])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user {
  username String @id @db.VarChar(255)
  name     String @db.VarChar(255)
  password String
  type     String @db.VarChar(50)
  id_team  Int?
  team     team?  @relation(fields: [id_team], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_id_team")
}
